// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace demo {

namespace {

const ::google::protobuf::Descriptor* CreateRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cards_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayCardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayCardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayCardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayCardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test_OptionalGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test_OptionalGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  CreateRoomReq_descriptor_ = file->message_type(0);
  static const int CreateRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, roomtype_),
  };
  CreateRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomReq_descriptor_,
      CreateRoomReq::default_instance_,
      CreateRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomReq));
  CreateRoomRsp_descriptor_ = file->message_type(1);
  static const int CreateRoomRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRsp, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRsp, roomnum_),
  };
  CreateRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomRsp_descriptor_,
      CreateRoomRsp::default_instance_,
      CreateRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomRsp));
  EnterRoomReq_descriptor_ = file->message_type(2);
  static const int EnterRoomReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, roomnum_),
  };
  EnterRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomReq_descriptor_,
      EnterRoomReq::default_instance_,
      EnterRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomReq));
  EnterRoomRsp_descriptor_ = file->message_type(3);
  static const int EnterRoomRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRsp, code_),
  };
  EnterRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterRoomRsp_descriptor_,
      EnterRoomRsp::default_instance_,
      EnterRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterRoomRsp));
  Cards_descriptor_ = file->message_type(4);
  static const int Cards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, card_),
  };
  Cards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cards_descriptor_,
      Cards::default_instance_,
      Cards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cards));
  PlayCardReq_descriptor_ = file->message_type(5);
  static const int PlayCardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReq, card_),
  };
  PlayCardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayCardReq_descriptor_,
      PlayCardReq::default_instance_,
      PlayCardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayCardReq));
  PlayCardRsp_descriptor_ = file->message_type(6);
  static const int PlayCardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardRsp, code_),
  };
  PlayCardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayCardRsp_descriptor_,
      PlayCardRsp::default_instance_,
      PlayCardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayCardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayCardRsp));
  Test_descriptor_ = file->message_type(7);
  static const int Test_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, reps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, optionalgroup_),
  };
  Test_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_descriptor_,
      Test::default_instance_,
      Test_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test));
  Test_OptionalGroup_descriptor_ = Test_descriptor_->nested_type(0);
  static const int Test_OptionalGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_OptionalGroup, requiredfield_),
  };
  Test_OptionalGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test_OptionalGroup_descriptor_,
      Test_OptionalGroup::default_instance_,
      Test_OptionalGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_OptionalGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test_OptionalGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test_OptionalGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomReq_descriptor_, &CreateRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomRsp_descriptor_, &CreateRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomReq_descriptor_, &EnterRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterRoomRsp_descriptor_, &EnterRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cards_descriptor_, &Cards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayCardReq_descriptor_, &PlayCardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayCardRsp_descriptor_, &PlayCardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_descriptor_, &Test::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test_OptionalGroup_descriptor_, &Test_OptionalGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete CreateRoomReq::default_instance_;
  delete CreateRoomReq_reflection_;
  delete CreateRoomRsp::default_instance_;
  delete CreateRoomRsp_reflection_;
  delete EnterRoomReq::default_instance_;
  delete EnterRoomReq_reflection_;
  delete EnterRoomRsp::default_instance_;
  delete EnterRoomRsp_reflection_;
  delete Cards::default_instance_;
  delete Cards_reflection_;
  delete PlayCardReq::default_instance_;
  delete PlayCardReq_reflection_;
  delete PlayCardRsp::default_instance_;
  delete PlayCardRsp_reflection_;
  delete Test::default_instance_;
  delete Test_reflection_;
  delete Test_OptionalGroup::default_instance_;
  delete Test_OptionalGroup_reflection_;
}

void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\022\004demo\"4\n\rCreateRoomReq\022\016\n\006Us"
    "erID\030\001 \002(\t\022\023\n\010RoomType\030\002 \002(\005:\0011\".\n\rCreat"
    "eRoomRsp\022\014\n\004Code\030\001 \002(\005\022\017\n\007RoomNum\030\002 \002(\t\""
    "D\n\014EnterRoomReq\022\016\n\006UserID\030\001 \002(\t\022\023\n\010RoomT"
    "ype\030\002 \002(\005:\0011\022\017\n\007RoomNum\030\003 \002(\t\"\034\n\014EnterRo"
    "omRsp\022\014\n\004code\030\001 \002(\005\"\025\n\005Cards\022\014\n\004card\030\001 \003"
    "(\005\"(\n\013PlayCardReq\022\031\n\004card\030\001 \002(\0132\013.demo.C"
    "ards\"\033\n\013PlayCardRsp\022\014\n\004Code\030\001 \002(\005\"\216\001\n\004Te"
    "st\022\r\n\005label\030\001 \002(\t\022\020\n\004type\030\002 \001(\005:\00277\022\014\n\004r"
    "eps\030\003 \003(\003\022/\n\roptionalgroup\030\004 \001(\n2\030.demo."
    "Test.OptionalGroup\032&\n\rOptionalGroup\022\025\n\rR"
    "equiredField\030\005 \002(\t", 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  CreateRoomReq::default_instance_ = new CreateRoomReq();
  CreateRoomRsp::default_instance_ = new CreateRoomRsp();
  EnterRoomReq::default_instance_ = new EnterRoomReq();
  EnterRoomRsp::default_instance_ = new EnterRoomRsp();
  Cards::default_instance_ = new Cards();
  PlayCardReq::default_instance_ = new PlayCardReq();
  PlayCardRsp::default_instance_ = new PlayCardRsp();
  Test::default_instance_ = new Test();
  Test_OptionalGroup::default_instance_ = new Test_OptionalGroup();
  CreateRoomReq::default_instance_->InitAsDefaultInstance();
  CreateRoomRsp::default_instance_->InitAsDefaultInstance();
  EnterRoomReq::default_instance_->InitAsDefaultInstance();
  EnterRoomRsp::default_instance_->InitAsDefaultInstance();
  Cards::default_instance_->InitAsDefaultInstance();
  PlayCardReq::default_instance_->InitAsDefaultInstance();
  PlayCardRsp::default_instance_->InitAsDefaultInstance();
  Test::default_instance_->InitAsDefaultInstance();
  Test_OptionalGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateRoomReq::kUserIDFieldNumber;
const int CreateRoomReq::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

CreateRoomReq::CreateRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CreateRoomReq)
}

void CreateRoomReq::InitAsDefaultInstance() {
}

CreateRoomReq::CreateRoomReq(const CreateRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.CreateRoomReq)
}

void CreateRoomReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomReq::~CreateRoomReq() {
  // @@protoc_insertion_point(destructor:demo.CreateRoomReq)
  SharedDtor();
}

void CreateRoomReq::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void CreateRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomReq_descriptor_;
}

const CreateRoomReq& CreateRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CreateRoomReq* CreateRoomReq::default_instance_ = NULL;

CreateRoomReq* CreateRoomReq::New() const {
  return new CreateRoomReq;
}

void CreateRoomReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    roomtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CreateRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomType;
        break;
      }

      // required int32 RoomType = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_RoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CreateRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CreateRoomReq)
  return false;
#undef DO_
}

void CreateRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CreateRoomReq)
  // required string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 RoomType = 2 [default = 1];
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CreateRoomReq)
}

::google::protobuf::uint8* CreateRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CreateRoomReq)
  // required string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 RoomType = 2 [default = 1];
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CreateRoomReq)
  return target;
}

int CreateRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 RoomType = 2 [default = 1];
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomReq::MergeFrom(const CreateRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomReq::CopyFrom(const CreateRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateRoomReq::Swap(CreateRoomReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomReq_descriptor_;
  metadata.reflection = CreateRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomRsp::kCodeFieldNumber;
const int CreateRoomRsp::kRoomNumFieldNumber;
#endif  // !_MSC_VER

CreateRoomRsp::CreateRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.CreateRoomRsp)
}

void CreateRoomRsp::InitAsDefaultInstance() {
}

CreateRoomRsp::CreateRoomRsp(const CreateRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.CreateRoomRsp)
}

void CreateRoomRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  roomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomRsp::~CreateRoomRsp() {
  // @@protoc_insertion_point(destructor:demo.CreateRoomRsp)
  SharedDtor();
}

void CreateRoomRsp::SharedDtor() {
  if (roomnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomnum_;
  }
  if (this != default_instance_) {
  }
}

void CreateRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomRsp_descriptor_;
}

const CreateRoomRsp& CreateRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

CreateRoomRsp* CreateRoomRsp::default_instance_ = NULL;

CreateRoomRsp* CreateRoomRsp::New() const {
  return new CreateRoomRsp;
}

void CreateRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_roomnum()) {
      if (roomnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomnum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.CreateRoomRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RoomNum;
        break;
      }

      // required string RoomNum = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomnum().data(), this->roomnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomnum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.CreateRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.CreateRoomRsp)
  return false;
#undef DO_
}

void CreateRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.CreateRoomRsp)
  // required int32 Code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string RoomNum = 2;
  if (has_roomnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnum().data(), this->roomnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomnum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.CreateRoomRsp)
}

::google::protobuf::uint8* CreateRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.CreateRoomRsp)
  // required int32 Code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string RoomNum = 2;
  if (has_roomnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnum().data(), this->roomnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomnum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roomnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.CreateRoomRsp)
  return target;
}

int CreateRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string RoomNum = 2;
    if (has_roomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomRsp::MergeFrom(const CreateRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_roomnum()) {
      set_roomnum(from.roomnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomRsp::CopyFrom(const CreateRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CreateRoomRsp::Swap(CreateRoomRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(roomnum_, other->roomnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomRsp_descriptor_;
  metadata.reflection = CreateRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomReq::kUserIDFieldNumber;
const int EnterRoomReq::kRoomTypeFieldNumber;
const int EnterRoomReq::kRoomNumFieldNumber;
#endif  // !_MSC_VER

EnterRoomReq::EnterRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.EnterRoomReq)
}

void EnterRoomReq::InitAsDefaultInstance() {
}

EnterRoomReq::EnterRoomReq(const EnterRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.EnterRoomReq)
}

void EnterRoomReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_ = 1;
  roomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomReq::~EnterRoomReq() {
  // @@protoc_insertion_point(destructor:demo.EnterRoomReq)
  SharedDtor();
}

void EnterRoomReq::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userid_;
  }
  if (roomnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomnum_;
  }
  if (this != default_instance_) {
  }
}

void EnterRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomReq_descriptor_;
}

const EnterRoomReq& EnterRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

EnterRoomReq* EnterRoomReq::default_instance_ = NULL;

EnterRoomReq* EnterRoomReq::New() const {
  return new EnterRoomReq;
}

void EnterRoomReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userid_->clear();
      }
    }
    roomtype_ = 1;
    if (has_roomnum()) {
      if (roomnum_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomnum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.EnterRoomReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UserID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoomType;
        break;
      }

      // required int32 RoomType = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_RoomType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomtype_)));
          set_has_roomtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RoomNum;
        break;
      }

      // required string RoomNum = 3;
      case 3: {
        if (tag == 26) {
         parse_RoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomnum().data(), this->roomnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomnum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.EnterRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.EnterRoomReq)
  return false;
#undef DO_
}

void EnterRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.EnterRoomReq)
  // required string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required int32 RoomType = 2 [default = 1];
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomtype(), output);
  }

  // required string RoomNum = 3;
  if (has_roomnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnum().data(), this->roomnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomnum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.EnterRoomReq)
}

::google::protobuf::uint8* EnterRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.EnterRoomReq)
  // required string UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 RoomType = 2 [default = 1];
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomtype(), target);
  }

  // required string RoomNum = 3;
  if (has_roomnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomnum().data(), this->roomnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomnum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.EnterRoomReq)
  return target;
}

int EnterRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 RoomType = 2 [default = 1];
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomtype());
    }

    // required string RoomNum = 3;
    if (has_roomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomReq::MergeFrom(const EnterRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_roomnum()) {
      set_roomnum(from.roomnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomReq::CopyFrom(const EnterRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnterRoomReq::Swap(EnterRoomReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(roomnum_, other->roomnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomReq_descriptor_;
  metadata.reflection = EnterRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterRoomRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

EnterRoomRsp::EnterRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.EnterRoomRsp)
}

void EnterRoomRsp::InitAsDefaultInstance() {
}

EnterRoomRsp::EnterRoomRsp(const EnterRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.EnterRoomRsp)
}

void EnterRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterRoomRsp::~EnterRoomRsp() {
  // @@protoc_insertion_point(destructor:demo.EnterRoomRsp)
  SharedDtor();
}

void EnterRoomRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterRoomRsp_descriptor_;
}

const EnterRoomRsp& EnterRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

EnterRoomRsp* EnterRoomRsp::default_instance_ = NULL;

EnterRoomRsp* EnterRoomRsp::New() const {
  return new EnterRoomRsp;
}

void EnterRoomRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.EnterRoomRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.EnterRoomRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.EnterRoomRsp)
  return false;
#undef DO_
}

void EnterRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.EnterRoomRsp)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.EnterRoomRsp)
}

::google::protobuf::uint8* EnterRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.EnterRoomRsp)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.EnterRoomRsp)
  return target;
}

int EnterRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterRoomRsp::MergeFrom(const EnterRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterRoomRsp::CopyFrom(const EnterRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnterRoomRsp::Swap(EnterRoomRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterRoomRsp_descriptor_;
  metadata.reflection = EnterRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cards::kCardFieldNumber;
#endif  // !_MSC_VER

Cards::Cards()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.Cards)
}

void Cards::InitAsDefaultInstance() {
}

Cards::Cards(const Cards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.Cards)
}

void Cards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cards::~Cards() {
  // @@protoc_insertion_point(destructor:demo.Cards)
  SharedDtor();
}

void Cards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cards_descriptor_;
}

const Cards& Cards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Cards* Cards::default_instance_ = NULL;

Cards* Cards::New() const {
  return new Cards;
}

void Cards::Clear() {
  card_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.Cards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card = 1;
      case 1: {
        if (tag == 8) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_card;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.Cards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.Cards)
  return false;
#undef DO_
}

void Cards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.Cards)
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.Cards)
}

::google::protobuf::uint8* Cards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.Cards)
  // repeated int32 card = 1;
  for (int i = 0; i < this->card_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.Cards)
  return target;
}

int Cards::ByteSize() const {
  int total_size = 0;

  // repeated int32 card = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card(i));
    }
    total_size += 1 * this->card_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cards::MergeFrom(const Cards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_.MergeFrom(from.card_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cards::CopyFrom(const Cards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cards::IsInitialized() const {

  return true;
}

void Cards::Swap(Cards* other) {
  if (other != this) {
    card_.Swap(&other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cards_descriptor_;
  metadata.reflection = Cards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayCardReq::kCardFieldNumber;
#endif  // !_MSC_VER

PlayCardReq::PlayCardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.PlayCardReq)
}

void PlayCardReq::InitAsDefaultInstance() {
  card_ = const_cast< ::demo::Cards*>(&::demo::Cards::default_instance());
}

PlayCardReq::PlayCardReq(const PlayCardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.PlayCardReq)
}

void PlayCardReq::SharedCtor() {
  _cached_size_ = 0;
  card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayCardReq::~PlayCardReq() {
  // @@protoc_insertion_point(destructor:demo.PlayCardReq)
  SharedDtor();
}

void PlayCardReq::SharedDtor() {
  if (this != default_instance_) {
    delete card_;
  }
}

void PlayCardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayCardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayCardReq_descriptor_;
}

const PlayCardReq& PlayCardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PlayCardReq* PlayCardReq::default_instance_ = NULL;

PlayCardReq* PlayCardReq::New() const {
  return new PlayCardReq;
}

void PlayCardReq::Clear() {
  if (has_card()) {
    if (card_ != NULL) card_->::demo::Cards::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayCardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.PlayCardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .demo.Cards card = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.PlayCardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.PlayCardReq)
  return false;
#undef DO_
}

void PlayCardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.PlayCardReq)
  // required .demo.Cards card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.PlayCardReq)
}

::google::protobuf::uint8* PlayCardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.PlayCardReq)
  // required .demo.Cards card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.PlayCardReq)
  return target;
}

int PlayCardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .demo.Cards card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayCardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayCardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayCardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayCardReq::MergeFrom(const PlayCardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      mutable_card()->::demo::Cards::MergeFrom(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayCardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayCardReq::CopyFrom(const PlayCardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayCardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayCardReq::Swap(PlayCardReq* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayCardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayCardReq_descriptor_;
  metadata.reflection = PlayCardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayCardRsp::kCodeFieldNumber;
#endif  // !_MSC_VER

PlayCardRsp::PlayCardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.PlayCardRsp)
}

void PlayCardRsp::InitAsDefaultInstance() {
}

PlayCardRsp::PlayCardRsp(const PlayCardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.PlayCardRsp)
}

void PlayCardRsp::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayCardRsp::~PlayCardRsp() {
  // @@protoc_insertion_point(destructor:demo.PlayCardRsp)
  SharedDtor();
}

void PlayCardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayCardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayCardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayCardRsp_descriptor_;
}

const PlayCardRsp& PlayCardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

PlayCardRsp* PlayCardRsp::default_instance_ = NULL;

PlayCardRsp* PlayCardRsp::New() const {
  return new PlayCardRsp;
}

void PlayCardRsp::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayCardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.PlayCardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.PlayCardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.PlayCardRsp)
  return false;
#undef DO_
}

void PlayCardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.PlayCardRsp)
  // required int32 Code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.PlayCardRsp)
}

::google::protobuf::uint8* PlayCardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.PlayCardRsp)
  // required int32 Code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.PlayCardRsp)
  return target;
}

int PlayCardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayCardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayCardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayCardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayCardRsp::MergeFrom(const PlayCardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayCardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayCardRsp::CopyFrom(const PlayCardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayCardRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayCardRsp::Swap(PlayCardRsp* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayCardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayCardRsp_descriptor_;
  metadata.reflection = PlayCardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Test_OptionalGroup::kRequiredFieldFieldNumber;
#endif  // !_MSC_VER

Test_OptionalGroup::Test_OptionalGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.Test.OptionalGroup)
}

void Test_OptionalGroup::InitAsDefaultInstance() {
}

Test_OptionalGroup::Test_OptionalGroup(const Test_OptionalGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.Test.OptionalGroup)
}

void Test_OptionalGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requiredfield_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test_OptionalGroup::~Test_OptionalGroup() {
  // @@protoc_insertion_point(destructor:demo.Test.OptionalGroup)
  SharedDtor();
}

void Test_OptionalGroup::SharedDtor() {
  if (requiredfield_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete requiredfield_;
  }
  if (this != default_instance_) {
  }
}

void Test_OptionalGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test_OptionalGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_OptionalGroup_descriptor_;
}

const Test_OptionalGroup& Test_OptionalGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Test_OptionalGroup* Test_OptionalGroup::default_instance_ = NULL;

Test_OptionalGroup* Test_OptionalGroup::New() const {
  return new Test_OptionalGroup;
}

void Test_OptionalGroup::Clear() {
  if (has_requiredfield()) {
    if (requiredfield_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      requiredfield_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test_OptionalGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.Test.OptionalGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string RequiredField = 5;
      case 5: {
        if (tag == 42) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requiredfield()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requiredfield().data(), this->requiredfield().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "requiredfield");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.Test.OptionalGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.Test.OptionalGroup)
  return false;
#undef DO_
}

void Test_OptionalGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.Test.OptionalGroup)
  // required string RequiredField = 5;
  if (has_requiredfield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredfield().data(), this->requiredfield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requiredfield");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->requiredfield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.Test.OptionalGroup)
}

::google::protobuf::uint8* Test_OptionalGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.Test.OptionalGroup)
  // required string RequiredField = 5;
  if (has_requiredfield()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredfield().data(), this->requiredfield().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "requiredfield");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->requiredfield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.Test.OptionalGroup)
  return target;
}

int Test_OptionalGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string RequiredField = 5;
    if (has_requiredfield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requiredfield());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test_OptionalGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test_OptionalGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test_OptionalGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test_OptionalGroup::MergeFrom(const Test_OptionalGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requiredfield()) {
      set_requiredfield(from.requiredfield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test_OptionalGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test_OptionalGroup::CopyFrom(const Test_OptionalGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test_OptionalGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Test_OptionalGroup::Swap(Test_OptionalGroup* other) {
  if (other != this) {
    std::swap(requiredfield_, other->requiredfield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test_OptionalGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_OptionalGroup_descriptor_;
  metadata.reflection = Test_OptionalGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Test::kLabelFieldNumber;
const int Test::kTypeFieldNumber;
const int Test::kRepsFieldNumber;
const int Test::kOptionalgroupFieldNumber;
#endif  // !_MSC_VER

Test::Test()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demo.Test)
}

void Test::InitAsDefaultInstance() {
  optionalgroup_ = const_cast< ::demo::Test_OptionalGroup*>(&::demo::Test_OptionalGroup::default_instance());
}

Test::Test(const Test& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:demo.Test)
}

void Test::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 77;
  optionalgroup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:demo.Test)
  SharedDtor();
}

void Test::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (this != default_instance_) {
    delete optionalgroup_;
  }
}

void Test::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test_descriptor_;
}

const Test& Test::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

Test* Test::default_instance_ = NULL;

Test* Test::New() const {
  return new Test;
}

void Test::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    type_ = 77;
    if (has_optionalgroup()) {
      if (optionalgroup_ != NULL) optionalgroup_->::demo::Test_OptionalGroup::Clear();
    }
  }
  reps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:demo.Test)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string label = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2 [default = 77];
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reps;
        break;
      }

      // repeated int64 reps = 3;
      case 3: {
        if (tag == 24) {
         parse_reps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_reps())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_reps())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reps;
        if (input->ExpectTag(35)) goto parse_optionalgroup;
        break;
      }

      // optional group OptionalGroup = 4 {
      case 4: {
        if (tag == 35) {
         parse_optionalgroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                4, input, mutable_optionalgroup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:demo.Test)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:demo.Test)
  return false;
#undef DO_
}

void Test::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:demo.Test)
  // required string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional int32 type = 2 [default = 77];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int64 reps = 3;
  for (int i = 0; i < this->reps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->reps(i), output);
  }

  // optional group OptionalGroup = 4 {
  if (has_optionalgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      4, this->optionalgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:demo.Test)
}

::google::protobuf::uint8* Test::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:demo.Test)
  // required string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional int32 type = 2 [default = 77];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int64 reps = 3;
  for (int i = 0; i < this->reps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->reps(i), target);
  }

  // optional group OptionalGroup = 4 {
  if (has_optionalgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        4, this->optionalgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demo.Test)
  return target;
}

int Test::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional int32 type = 2 [default = 77];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional group OptionalGroup = 4 {
    if (has_optionalgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->optionalgroup());
    }

  }
  // repeated int64 reps = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->reps(i));
    }
    total_size += 1 * this->reps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
  GOOGLE_CHECK_NE(&from, this);
  reps_.MergeFrom(from.reps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_optionalgroup()) {
      mutable_optionalgroup()->::demo::Test_OptionalGroup::MergeFrom(from.optionalgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_optionalgroup()) {
    if (!this->optionalgroup().IsInitialized()) return false;
  }
  return true;
}

void Test::Swap(Test* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(type_, other->type_);
    reps_.Swap(&other->reps_);
    std::swap(optionalgroup_, other->optionalgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test_descriptor_;
  metadata.reflection = Test_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace demo

// @@protoc_insertion_point(global_scope)
